include "metadata.conf"

logger.scala.slick = DEBUG

platforms: [
  {
    name: "mantis"
    network: "testnet"
    enabled: true
    node: "http://localhost:8546"

    retry {
      max-wait: 2s
      max-retry: 5
    }

    batching {
      indexer-threads-count: 8
      http-fetch-threads-count: 8
      blocks-batch-size: 100
      transactions-batch-size: 100
      contracts-batch-size: 100
      tokens-batch-size: 100
    }
  }

]

conseil {
  hostname: "0.0.0.0"
  port: 8090
  cache-ttl: 15 minutes
  max-query-result-size: 100000
  high-cardinality-limit: 100
  startup-deadline: 5 minutes

  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      user: "foo"
      password: "bar"
      url: "jdbc:postgresql://localhost:5432/conseil"
    }
    numThreads: 20
    maxConnections: 20
  }

  # Security settings
  security.api-keys {
    # List of authorized API keys needed to query Conseil
    keys: []

    allow-blank: true
  }
}

lorre {
  sleep-interval: 5 s
  bootup-retry-interval: 10 s
  bootup-connection-check-timeout: 10 s
  #Used to make sure Lorre records average fees every n iterations
  fee-update-interval: 20
  #Used to select how many fees should be averaged together
  number-of-fees-averaged: 1000
  depth: newest,
  headHash: None

  #Used for configuring time-out for reading a web response content
  #Timeout on sync network calls
  request-await-time: 120 s
  #Timeouts to read the response into a strict string
  get-response-entity-timeout: 90 s
  post-response-entity-timeout: 1 s

  # defines custom updates to be run at specific points in time (i.e. upon reaching a given level)
  # take care to guarantee that the event type corresponds to some definition of
  # tech.cryptonomic.conseil.config.ChainEventType
  chain-events: [
    {
      type: accountsRefresh,
      levels: {}
    }
  ]

  db {
    dataSourceClass: "org.postgresql.ds.PGSimpleDataSource"
    properties {
      user: "foo"
      password: "bar"
      url: "jdbc:postgresql://localhost:5432/conseil"
    }
    numThreads: 20
    maxConnections: 20
  }

  batched-fetches {
    # The following configs defines how many concurrent requests we'd like to run
    #   against a tezos node to speed up fetching of data
    # This values should take into account the overall load that will be generated by
    #   all fetching operations that could be generated by different Conseil
    #   instances (if more than one) and the number of requests sent by each
    #   said operations, and be compared to the load handling capabilities
    #   of the Tezos node itself

    #Used when getting accounts from tezos
    account-concurrency-level: 5

    #Used when getting operation data for each new block just fetched
    block-operations-concurrency-level: 10

    #Used to paginate blocks read from tezos before each db storage
    block-page-size: 500

    #Used to specify the max-time allowed for each block-page to finish processing
    #Currently takes into account the time to process all corresponding accounts for each page
    block-page-processing-timeout: 1 hour

    #Used to specify the max-time allowed for each accounts-page to finish processing
    account-page-processing-timeout: 15 minutes

    #Used to specify the max-time allowed for each delegate-page to finish processing
    delegate-page-processing-timeout: 15 minutes

  }

  # Configuration for fetching upcoming baking and endorsing rights
  block-rights-fetching {
    init-delay: 2 minutes # time before starting fetching rights
    interval: 60 minutes # interval between fetches
    cycles-to-fetch: 5 # how many cycles we want to fetch
    cycle-size: 4096 # size of the cycle, by default 4096
    fetch-size: 200 # amount of rights we fetch at once
    update-size: 16 # amount of rights we update after Lorre syncs
    enabled: true
  }
  # Custom libSodium settings
  sodium.libraryPath: "/usr/lib/x86_64-linux-gnu/libsodium.so.18"
}

# Customization on the underlying actor system
akka {
  http {
    # this is essentially available to enable composition of database operations
    # current configuration is based upon the default-blocking-io-dispatcher in akka
    dispatcher {
      type: "Dispatcher"
      executor: "thread-pool-executor"
      throughput: 1

      thread-pool-executor {
        fixed-pool-size: 16
      }
    }

    server {
      request-timeout: 5 minutes
      idle-timeout: 5 minutes
    }
  }
}
